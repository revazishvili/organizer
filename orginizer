# საჭირო მოდულების იმპორტი კივიდან
from kivy.app import App  # App კლასის იმპორტი, რომელიც კივის აპლიკაციების ძირითადი კლასია
from kivy.uix.boxlayout import BoxLayout  # BoxLayout კლასის იმპორტი ვიჯეტების განლაგებისთვის
from kivy.uix.label import Label  # Label კლასის იმპორტი ტექსტის გამოსახატავად
from kivy.uix.textinput import TextInput  # TextInput კლასის იმპორტი ტექსტის შესაყვანად
from kivy.uix.button import Button  # Button კლასის იმპორტი ღილაკების შესაქმნელად
from kivy.uix.scrollview import ScrollView  # ScrollView კლასის იმპორტი კონტენტის გასახრიალად

# მთავარი აპლიკაციის კლასის განმარტება
class Organizer(App):
    # კონსტრუქტორი აპლიკაციის ინიციალიზაციისთვის
    def __init__(self):
        super().__init__()  # მშობელი კლასის (App) კონსტრუქტორის გამოძახება
        # ლექსიკონი დავალებებისა და ვადების შესანახად
        self.tasks = {}

    # მეთოდი გრაფიკული ინტერფეისის აგებისთვის
    def build(self):
        # მთავარი განლაგება ვერტიკალურია
        self.layout = BoxLayout(orientation='vertical')

        # განლაგება დავალების დამატებისთვის
        self.add_task_layout = BoxLayout(size_hint_y=None, height=50)

        # გასახრიალი ხედი დავალებების გამოსახატავად
        self.task_list = ScrollView()

        # ტექსტური შეყვანა დავალების სახელისთვის
        self.add_task_input = TextInput(hint_text='დაამატე დავალება', font_name='NotoSansGeorgian-Regular.ttf', font_size=18, size_hint_x=0.7)

        # ტექსტური შეყვანა ვადის შესაყვანად
        self.add_due_date_input = TextInput(hint_text='Due date (YYYY-MM-DD)', size_hint_x=0.2)

        # ღილაკი დავალების დასამატებლად
        self.add_task_button = Button(text='დამატება', size_hint_x=0.1, font_name='NotoSansGeorgian-Regular.ttf',)

        # ღილაკის დაჭერის ამბის მიბმა add_task მეთოდთან
        self.add_task_button.bind(on_press=self.add_task)

        # ვიჯეტების დამატება განლაგებაში
        self.add_task_layout.add_widget(self.add_task_input)
        self.add_task_layout.add_widget(self.add_due_date_input)
        self.add_task_layout.add_widget(self.add_task_button)
        self.layout.add_widget(self.add_task_layout)
        self.layout.add_widget(self.task_list)

        # მთავარი განლაგების დაბრუნება
        return self.layout

    # მეთოდი ახალი დავალების დასამატებლად
    def add_task(self, instance):
        # დავალებისა და ვადის მიღება შეყვანის ველებიდან
        task_name = self.add_task_input.text.strip()
        due_date = self.add_due_date_input.text.strip()

        # თუ დავალებისა და ვადის ველები შევსებულია
        if task_name and due_date:
            # დავალების დამატება ლექსიკონში
            self.tasks[task_name] = due_date

            # დავალებების სიის განახლება
            self.update_task_list()

            # შეყვანის ველების გასუფთავება
            self.add_task_input.text = ''
            self.add_due_date_input.text = ''

    # მეთოდი დავალების ამოსაშლელად
    def remove_task(self, task_name):
        # დავალების წაშლა ლექსიკონიდან
        del self.tasks[task_name]

        # დავალებების სიის განახლება
        self.update_task_list()

    # მეთოდი დავალებების სიის განსახლებისთვის
    def update_task_list(self):
        # წინა ვიჯეტების გასუფთავება დავალებების სიიდან
        self.task_list.clear_widgets()

        # ციკლი დავალებების ლექსიკონზე
        for task_name, due_date in self.tasks.items():
            # განლაგების შექმნა თითოეული დავალებისთვის
            task_layout = BoxLayout(size_hint_y=None, height=40)

            # ლეიბლი დავალებისა და ვადის გამოსახატავად
            task_label = Label(text=f'{task_name} - თარიღი: {due_date}', size_hint_x=0.8, font_name='NotoSansGeorgian-Regular.ttf', font_size=18)

            # ღილაკი დავალების ამოსაშლელად
            remove_button = Button(text='Remove', size_hint_x=0.2)

            # ღილაკის დაჭერის ამბის მიბმა remove_task მეთოდთან დავალების სახელით
            remove_button.bind(on_press=lambda x, task=task_name: self.remove_task(task))

            # ვიჯეტების დამატება დავალების განლაგებაში
            task_layout.add_widget(task_label)
            task_layout.add_widget(remove_button)

            # დავალების განლაგების დამატება დავალებების სიაში
            self.task_list.add_widget(task_layout)

# პროგრამის შესასვლელი წერტილი
if __name__ == '__main__':
    # Organizer კლასის ინსტანციის შექმნა და აპლიკაციის გაშვება
    Organizer().run()
